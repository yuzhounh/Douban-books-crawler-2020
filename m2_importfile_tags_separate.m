%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\Python\20170107 Douban Books\Douban_11_integrate\Tags\???
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/07/02 11:23:55

clear;

fprintf('Import books from each tag......\n\n');

% create a folder to store the .mat files
dirname='Tags_mat';
if ~exist(dirname,'dir')
    mkdir(dirname);
end

load Tags_name.mat;
tic;
for iTag=1:nTag
    % current tag name
    cTag=sTag(iTag);
    
    %% Initialize variables.
    filename = sprintf('Tags/%s',cTag);
    delimiter = ',';
    startRow = 3;
    
    %% Read columns of data as text:
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%s%s%s%s%s%s%s%s%s%s%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r');
    
    %% Read columns of data according to the format.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    textscan(fileID, '%[^\n\r]', startRow-1, 'WhiteSpace', '', 'ReturnOnError', false, 'EndOfLine', '\r\n');
    dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'ReturnOnError', false);
    
    %% Close the text file.
    fclose(fileID);
    
    %% Convert the contents of columns containing numeric text to numbers.
    % Replace non-numeric text with NaN.
    raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
    for col=1:length(dataArray)-1
        raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
    end
    numericData = NaN(size(dataArray{1},1),size(dataArray,2));
    
    for col=[1,2,3,8,9,10]
        % Converts text in the input cell array to numbers. Replaced non-numeric
        % text with NaN.
        rawData = dataArray{col};
        for row=1:size(rawData, 1)
            % Create a regular expression to detect and remove non-numeric prefixes and
            % suffixes.
            regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
            try
                result = regexp(rawData(row), regexstr, 'names');
                numbers = result.numbers;
                
                % Detected commas in non-thousand locations.
                invalidThousandsSeparator = false;
                if numbers.contains(',')
                    thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                    if isempty(regexp(numbers, thousandsRegExp, 'once'))
                        numbers = NaN;
                        invalidThousandsSeparator = true;
                    end
                end
                % Convert numeric text to numbers.
                if ~invalidThousandsSeparator
                    numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                    numericData(row, col) = numbers{1};
                    raw{row, col} = numbers{1};
                end
            catch
                raw{row, col} = rawData{row};
            end
        end
    end
    
    
    %% Split data into numeric and string columns.
    rawNumericColumns = raw(:, [1,2,3,8,9,10]);
    rawStringColumns = string(raw(:, [4,5,6,7]));
    
    
    %% Replace non-numeric cells with NaN
    R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
    rawNumericColumns(R) = {NaN}; % Replace non-numeric cells
    
    %% Allocate imported array to column variable names
    ID = cell2mat(rawNumericColumns(:, 1));
    rating = cell2mat(rawNumericColumns(:, 2));
    votes = cell2mat(rawNumericColumns(:, 3));
    title1 = rawStringColumns(:, 1);
    author = rawStringColumns(:, 2);
    translator = rawStringColumns(:, 3);
    publisher = rawStringColumns(:, 4);
    date1 = cell2mat(rawNumericColumns(:, 4));
    price = cell2mat(rawNumericColumns(:, 5));
    VarName10 = cell2mat(rawNumericColumns(:, 6));
    
    
    %% Clear temporary variables
    clearvars delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp rawNumericColumns rawStringColumns R;
    
    %% save the results
    date=date1;
    title=title1;
    save(sprintf('Tags_mat/%s.mat',cTag),'ID','rating','votes','title');
    
    perct(toc,iTag,nTag,30);
end